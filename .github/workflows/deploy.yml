name: Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      PORT: 3000
      DEPLOY_URL: ${{ secrets.DEPLOY_URL != '' && secrets.DEPLOY_URL || '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Set fallback DEPLOY_URL
        if: ${{ env.DEPLOY_URL == '' }}
        run: echo "DEPLOY_URL=http://127.0.0.1:${PORT}" >> $GITHUB_ENV

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Type check
        run: npm run type-check

      - name: Build
        run: npm run build

      - name: Show local BUILD_ID (CI)
        run: |
          set -e
          echo 'Local BUILD_ID:'
          cat .next/BUILD_ID
          echo 'Local static assets count:'
          find .next/static -type f | wc -l
          echo 'Local standalone server.js:'
          test -f .next/standalone/server.js && echo 'server.js OK' || (echo 'server.js missing' && exit 1)

      - name: Create deployment archive
        run: |
          set -e
          tar -czf deploy.tgz .next/standalone .next/static .next/BUILD_ID public ecosystem.config.js

      - name: Upload archive via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          source: deploy.tgz
          target: ${{ secrets.DEPLOY_PATH }}

      - name: Unpack archive on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            set -e
            cd "${{ secrets.DEPLOY_PATH }}"
            rm -rf standalone static BUILD_ID
            tar -xzf deploy.tgz
            rm -f deploy.tgz
            ls -la .next || true


      - name: Verify build artifacts on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            set -e
            cd "${{ secrets.DEPLOY_PATH }}"
            echo 'Listing .next on remote:'
            ls -la .next || true
            echo 'BUILD_ID:'
            cat .next/BUILD_ID
            echo 'Check standalone server.js:'
            test -f .next/standalone/server.js && echo 'server.js OK' || (echo 'server.js missing' && exit 1)
            echo 'Static assets count:'
            find .next/static -type f | wc -l
            echo "Misplaced standalone check:"
            [ -d .next/standalone ] && echo ".next/standalone OK" || echo ".next/standalone MISSING"
            [ -d standalone ] && echo "Found ./standalone (wrong)" || true

      - name: Reload PM2 on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            set -e
            cd "${{ secrets.DEPLOY_PATH }}"
            echo 'PATH before:'
            echo "$PATH"
            echo 'Node version:'
            node -v || true
            echo 'NPM version:'
            npm -v || true
            # Prefer explicit pm2 path if present on server
            if [ -x "/home/vetternkraft/.npm-global/bin/pm2" ]; then
              PM2_BIN="/home/vetternkraft/.npm-global/bin/pm2"
            else
              # Fallback: try to locate pm2 in PATH or common prefixes
              PM2_BIN=$(command -v pm2 || true)
              if [ -z "$PM2_BIN" ]; then
                PREFIX=$(npm config get prefix 2>/dev/null || echo "$HOME/.npm-global")
                export PATH="$PREFIX/bin:$PATH"
                PM2_BIN=$(command -v pm2 || true)
              fi
              if [ -z "$PM2_BIN" ] && [ -x "$HOME/.npm-global/bin/pm2" ]; then
                PM2_BIN="$HOME/.npm-global/bin/pm2"
              fi
              if [ -z "$PM2_BIN" ] && [ -x "/usr/local/bin/pm2" ]; then
                PM2_BIN="/usr/local/bin/pm2"
              fi
            fi
            if [ -z "$PM2_BIN" ]; then
              echo 'ERROR: pm2 not found in PATH or common locations.'
              echo 'Consider installing pm2 globally (npm i -g pm2) or adding it to PATH.'
              exit 1
            fi
            echo "Using PM2 at: $PM2_BIN"
            echo 'Force restart PM2 process to pick updated config:'
            "$PM2_BIN" delete gliwicka111 || true
            "$PM2_BIN" start ecosystem.config.js
            "$PM2_BIN" status || true
            echo 'Tail last pm2 logs:'
            "$PM2_BIN" logs gliwicka111 --lines 50 --nostream || true

      - name: Preflight deployment configuration
        run: |
          set -euo pipefail
          DEPLOY_URL_VALUE="${DEPLOY_URL:-}"
          PORT_VALUE="${PORT:-}"
          if [ -z "$PORT_VALUE" ]; then
            echo "Preflight: PORT is unset"
          else
            echo "Preflight: PORT='$PORT_VALUE'"
          fi
          if [ -z "$DEPLOY_URL_VALUE" ]; then
            echo "Preflight: DEPLOY_URL is empty"
            echo "ERROR: DEPLOY_URL must be provided before continuing."
            exit 1
          fi
          echo "Preflight: DEPLOY_URL='$DEPLOY_URL_VALUE'"
          if ! printf '%s' "$DEPLOY_URL_VALUE" | grep -Eq '^https?://[^[:space:]]+$'; then
            echo "ERROR: DEPLOY_URL '$DEPLOY_URL_VALUE' is malformed. Expected to start with http:// or https://."
            exit 1
          fi
          if [ -n "$PORT_VALUE" ] && ! printf '%s' "$PORT_VALUE" | grep -Eq '^[0-9]+$'; then
            echo "ERROR: PORT '$PORT_VALUE' must be numeric when set."
            exit 1
          fi

      - name: Wait for service to start
        if: ${{ env.DEPLOY_URL != '' }}
        env:
          PORT: ${{ env.PORT }}
          HOST: 127.0.0.1
          HOSTNAME: 127.0.0.1
        run: |
          set -euo pipefail
          export PORT HOST HOSTNAME
          HEALTH_HOST="${HOST:-${HOSTNAME}}"
          HEALTHCHECK_URL="http://${HEALTH_HOST}:${PORT}"
          LOG_FILE=$(mktemp)
          LOCAL_CHECK_PASSED=0

          echo "Starting Next.js server in background on ${HEALTHCHECK_URL}..."
          npm start >"$LOG_FILE" 2>&1 &
          NEXT_PID=$!

          cleanup() {
            STATUS=$?
            trap - EXIT
            if [ -n "${NEXT_PID:-}" ] && kill -0 "$NEXT_PID" 2>/dev/null; then
              echo "Stopping Next.js server (PID: $NEXT_PID)"
              kill "$NEXT_PID" 2>/dev/null || true
              wait "$NEXT_PID" 2>/dev/null || true
            fi
            if [ "$STATUS" -ne 0 ] && [ "${LOCAL_CHECK_PASSED}" -eq 0 ]; then
              echo "---- Next.js server log (last 50 lines) ----"
              tail -n 50 "$LOG_FILE" || true
              echo "-------------------------------------------"
            fi
            exit "$STATUS"
          }

          trap cleanup EXIT

          echo 'Waiting for service to be ready...'
          for i in $(seq 1 10); do
            if curl -fsS "$HEALTHCHECK_URL" >/dev/null 2>&1; then
              echo "Service is up at $HEALTHCHECK_URL."
              LOCAL_CHECK_PASSED=1
              break
            fi

            if ! kill -0 "$NEXT_PID" 2>/dev/null; then
              echo 'Next.js server process exited unexpectedly.'
              exit 1
            fi

            echo "Attempt $i failed; retrying in 5s..."
            sleep 5

            if [ "$i" -eq 10 ]; then
              echo "Service did not respond after $i attempts."
              exit 1
            fi
          done

          echo 'Local Next.js server readiness confirmed.'
          if [ -n "${NEXT_PID:-}" ] && kill -0 "$NEXT_PID" 2>/dev/null; then
            kill "$NEXT_PID" 2>/dev/null || true
            wait "$NEXT_PID" 2>/dev/null || true
            NEXT_PID=""
          fi

          echo "Verifying remote deployment at $DEPLOY_URL"
          if ! curl -fsS "$DEPLOY_URL" >/dev/null 2>&1; then
            echo 'Service failed to start in time'
            exit 1
          fi

      - name: Smoke test
        if: ${{ env.DEPLOY_URL != '' }}
        run: |
          set -e
          curl -fsSL "$DEPLOY_URL" | grep -qi "<html"
